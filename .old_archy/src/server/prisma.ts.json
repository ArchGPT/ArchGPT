{
  "ast": {
    "nestedIndex": [],
    "label": "FILE",
    "name": "root",
    "str": "/**\n * Instantiates a single instance PrismaClient and save it on the global object.\n * @link https://www.prisma.io/docs/support/help-articles/nextjs-prisma-client-dev-practices\n */\n\n\n\nconst prismaGlobal = global as typeof global & {\n  prisma?: PrismaClient;\n};\n\nexport const prisma: PrismaClient =\n  prismaGlobal.prisma ??\n  new PrismaClient({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });\n\nif (env.NODE_ENV !== 'production') {\n  prismaGlobal.prisma = prisma;\n}\n",
    "childrenLabels": [
      0,
      1,
      2,
      3
    ],
    "children": [
      {
        "nestedIndex": [
          0
        ],
        "str": "/**\n * Instantiates a single instance PrismaClient and save it on the global object.\n * @link https://www.prisma.io/docs/support/help-articles/nextjs-prisma-client-dev-practices\n */",
        "label": 0,
        "name": "comment"
      },
      {
        "nestedIndex": [
          1
        ],
        "str": "const prismaGlobal = global as typeof global & {\n  prisma?: PrismaClient;\n};",
        "label": 1,
        "name": "lexical_declaration",
        "childrenLabels": [
          0
        ],
        "children": [
          {
            "nestedIndex": [
              1,
              0
            ],
            "str": "prismaGlobal = global as typeof global & {\n  prisma?: PrismaClient;\n}",
            "label": 0,
            "name": "variable_declarator",
            "childrenLabels": [
              "nameNode",
              "valueNode"
            ],
            "children": [
              {
                "nestedIndex": [
                  1,
                  0,
                  0
                ],
                "str": "prismaGlobal",
                "label": "nameNode",
                "name": "identifier"
              },
              {
                "nestedIndex": [
                  1,
                  0,
                  1
                ],
                "str": "global as typeof global & {\n  prisma?: PrismaClient;\n}",
                "label": "valueNode",
                "name": "as_expression",
                "childrenLabels": [
                  0,
                  1
                ],
                "children": [
                  {
                    "nestedIndex": [
                      1,
                      0,
                      1,
                      0
                    ],
                    "str": "global",
                    "label": 0,
                    "name": "identifier"
                  },
                  {
                    "nestedIndex": [
                      1,
                      0,
                      1,
                      1
                    ],
                    "str": "typeof global & {\n  prisma?: PrismaClient;\n}",
                    "label": 1,
                    "name": "intersection_type",
                    "childrenLabels": [
                      0,
                      1
                    ],
                    "children": [
                      {
                        "nestedIndex": [
                          1,
                          0,
                          1,
                          1,
                          0
                        ],
                        "str": "typeof global",
                        "label": 0,
                        "name": "type_query",
                        "childrenLabels": [
                          0
                        ],
                        "children": [
                          {
                            "nestedIndex": [
                              1,
                              0,
                              1,
                              1,
                              0,
                              0
                            ],
                            "str": "global",
                            "label": 0,
                            "name": "identifier"
                          }
                        ]
                      },
                      {
                        "nestedIndex": [
                          1,
                          0,
                          1,
                          1,
                          1
                        ],
                        "str": "{\n  prisma?: PrismaClient;\n}",
                        "label": 1,
                        "name": "object_type",
                        "childrenLabels": [
                          0
                        ],
                        "children": [
                          {
                            "nestedIndex": [
                              1,
                              0,
                              1,
                              1,
                              1,
                              0
                            ],
                            "str": "prisma?: PrismaClient",
                            "label": 0,
                            "name": "property_signature",
                            "childrenLabels": [
                              "nameNode",
                              "typeNode"
                            ],
                            "children": [
                              {
                                "nestedIndex": [
                                  1,
                                  0,
                                  1,
                                  1,
                                  1,
                                  0,
                                  0
                                ],
                                "str": "prisma",
                                "label": "nameNode",
                                "name": "property_identifier"
                              },
                              {
                                "nestedIndex": [
                                  1,
                                  0,
                                  1,
                                  1,
                                  1,
                                  0,
                                  1
                                ],
                                "str": ": PrismaClient",
                                "label": "typeNode",
                                "name": "type_annotation",
                                "childrenLabels": [
                                  0
                                ],
                                "children": [
                                  {
                                    "nestedIndex": [
                                      1,
                                      0,
                                      1,
                                      1,
                                      1,
                                      0,
                                      1,
                                      0
                                    ],
                                    "str": "PrismaClient",
                                    "label": 0,
                                    "name": "type_identifier"
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "nestedIndex": [
          2
        ],
        "str": "export const prisma: PrismaClient =\n  prismaGlobal.prisma ??\n  new PrismaClient({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });",
        "label": 2,
        "name": "export_statement",
        "childrenLabels": [
          "declarationNode"
        ],
        "children": [
          {
            "nestedIndex": [
              2,
              0
            ],
            "str": "const prisma: PrismaClient =\n  prismaGlobal.prisma ??\n  new PrismaClient({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  });",
            "label": "declarationNode",
            "name": "lexical_declaration",
            "childrenLabels": [
              0
            ],
            "children": [
              {
                "nestedIndex": [
                  2,
                  0,
                  0
                ],
                "str": "prisma: PrismaClient =\n  prismaGlobal.prisma ??\n  new PrismaClient({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  })",
                "label": 0,
                "name": "variable_declarator",
                "childrenLabels": [
                  "nameNode",
                  "typeNode",
                  "valueNode"
                ],
                "children": [
                  {
                    "nestedIndex": [
                      2,
                      0,
                      0,
                      0
                    ],
                    "str": "prisma",
                    "label": "nameNode",
                    "name": "identifier"
                  },
                  {
                    "nestedIndex": [
                      2,
                      0,
                      0,
                      1
                    ],
                    "str": ": PrismaClient",
                    "label": "typeNode",
                    "name": "type_annotation",
                    "childrenLabels": [
                      0
                    ],
                    "children": [
                      {
                        "nestedIndex": [
                          2,
                          0,
                          0,
                          1,
                          0
                        ],
                        "str": "PrismaClient",
                        "label": 0,
                        "name": "type_identifier"
                      }
                    ]
                  },
                  {
                    "nestedIndex": [
                      2,
                      0,
                      0,
                      2
                    ],
                    "str": "prismaGlobal.prisma ??\n  new PrismaClient({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  })",
                    "label": "valueNode",
                    "name": "binary_expression",
                    "childrenLabels": [
                      "leftNode",
                      "rightNode"
                    ],
                    "children": [
                      {
                        "nestedIndex": [
                          2,
                          0,
                          0,
                          2,
                          0
                        ],
                        "str": "prismaGlobal.prisma",
                        "label": "leftNode",
                        "name": "member_expression",
                        "childrenLabels": [
                          "objectNode",
                          "propertyNode"
                        ],
                        "children": [
                          {
                            "nestedIndex": [
                              2,
                              0,
                              0,
                              2,
                              0,
                              0
                            ],
                            "str": "prismaGlobal",
                            "label": "objectNode",
                            "name": "identifier"
                          },
                          {
                            "nestedIndex": [
                              2,
                              0,
                              0,
                              2,
                              0,
                              1
                            ],
                            "str": "prisma",
                            "label": "propertyNode",
                            "name": "property_identifier"
                          }
                        ]
                      },
                      {
                        "nestedIndex": [
                          2,
                          0,
                          0,
                          2,
                          1
                        ],
                        "str": "new PrismaClient({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  })",
                        "label": "rightNode",
                        "name": "new_expression",
                        "childrenLabels": [
                          "constructorNode",
                          "argumentsNode"
                        ],
                        "children": [
                          {
                            "nestedIndex": [
                              2,
                              0,
                              0,
                              2,
                              1,
                              0
                            ],
                            "str": "PrismaClient",
                            "label": "constructorNode",
                            "name": "identifier"
                          },
                          {
                            "nestedIndex": [
                              2,
                              0,
                              0,
                              2,
                              1,
                              1
                            ],
                            "str": "({\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  })",
                            "label": "argumentsNode",
                            "name": "arguments",
                            "childrenLabels": [
                              0
                            ],
                            "children": [
                              {
                                "nestedIndex": [
                                  2,
                                  0,
                                  0,
                                  2,
                                  1,
                                  1,
                                  0
                                ],
                                "str": "{\n    log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error'],\n  }",
                                "label": 0,
                                "name": "object",
                                "childrenLabels": [
                                  0
                                ],
                                "children": [
                                  {
                                    "nestedIndex": [
                                      2,
                                      0,
                                      0,
                                      2,
                                      1,
                                      1,
                                      0,
                                      0
                                    ],
                                    "str": "log:\n      env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error']",
                                    "label": 0,
                                    "name": "pair",
                                    "childrenLabels": [
                                      "keyNode",
                                      "valueNode"
                                    ],
                                    "children": [
                                      {
                                        "nestedIndex": [
                                          2,
                                          0,
                                          0,
                                          2,
                                          1,
                                          1,
                                          0,
                                          0,
                                          0
                                        ],
                                        "str": "log",
                                        "label": "keyNode",
                                        "name": "property_identifier"
                                      },
                                      {
                                        "nestedIndex": [
                                          2,
                                          0,
                                          0,
                                          2,
                                          1,
                                          1,
                                          0,
                                          0,
                                          1
                                        ],
                                        "str": "env.NODE_ENV === 'development' ? ['query', 'error', 'warn'] : ['error']",
                                        "label": "valueNode",
                                        "name": "ternary_expression",
                                        "childrenLabels": [
                                          "conditionNode",
                                          "consequenceNode",
                                          "alternativeNode"
                                        ],
                                        "children": [
                                          {
                                            "nestedIndex": [
                                              2,
                                              0,
                                              0,
                                              2,
                                              1,
                                              1,
                                              0,
                                              0,
                                              1,
                                              0
                                            ],
                                            "str": "env.NODE_ENV === 'development'",
                                            "label": "conditionNode",
                                            "name": "binary_expression",
                                            "childrenLabels": [
                                              "leftNode",
                                              "rightNode"
                                            ],
                                            "children": [
                                              {
                                                "nestedIndex": [
                                                  2,
                                                  0,
                                                  0,
                                                  2,
                                                  1,
                                                  1,
                                                  0,
                                                  0,
                                                  1,
                                                  0,
                                                  0
                                                ],
                                                "str": "env.NODE_ENV",
                                                "label": "leftNode",
                                                "name": "member_expression",
                                                "childrenLabels": [
                                                  "objectNode",
                                                  "propertyNode"
                                                ],
                                                "children": [
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      0,
                                                      0,
                                                      0
                                                    ],
                                                    "str": "env",
                                                    "label": "objectNode",
                                                    "name": "identifier"
                                                  },
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      0,
                                                      0,
                                                      1
                                                    ],
                                                    "str": "NODE_ENV",
                                                    "label": "propertyNode",
                                                    "name": "property_identifier"
                                                  }
                                                ]
                                              },
                                              {
                                                "nestedIndex": [
                                                  2,
                                                  0,
                                                  0,
                                                  2,
                                                  1,
                                                  1,
                                                  0,
                                                  0,
                                                  1,
                                                  0,
                                                  1
                                                ],
                                                "str": "'development'",
                                                "label": "rightNode",
                                                "name": "string",
                                                "childrenLabels": [
                                                  0
                                                ],
                                                "children": [
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      0,
                                                      1,
                                                      0
                                                    ],
                                                    "str": "development",
                                                    "label": 0,
                                                    "name": "string_fragment"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "nestedIndex": [
                                              2,
                                              0,
                                              0,
                                              2,
                                              1,
                                              1,
                                              0,
                                              0,
                                              1,
                                              1
                                            ],
                                            "str": "['query', 'error', 'warn']",
                                            "label": "consequenceNode",
                                            "name": "array",
                                            "childrenLabels": [
                                              0,
                                              1,
                                              2
                                            ],
                                            "children": [
                                              {
                                                "nestedIndex": [
                                                  2,
                                                  0,
                                                  0,
                                                  2,
                                                  1,
                                                  1,
                                                  0,
                                                  0,
                                                  1,
                                                  1,
                                                  0
                                                ],
                                                "str": "'query'",
                                                "label": 0,
                                                "name": "string",
                                                "childrenLabels": [
                                                  0
                                                ],
                                                "children": [
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      1,
                                                      0,
                                                      0
                                                    ],
                                                    "str": "query",
                                                    "label": 0,
                                                    "name": "string_fragment"
                                                  }
                                                ]
                                              },
                                              {
                                                "nestedIndex": [
                                                  2,
                                                  0,
                                                  0,
                                                  2,
                                                  1,
                                                  1,
                                                  0,
                                                  0,
                                                  1,
                                                  1,
                                                  1
                                                ],
                                                "str": "'error'",
                                                "label": 1,
                                                "name": "string",
                                                "childrenLabels": [
                                                  0
                                                ],
                                                "children": [
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      1,
                                                      1,
                                                      0
                                                    ],
                                                    "str": "error",
                                                    "label": 0,
                                                    "name": "string_fragment"
                                                  }
                                                ]
                                              },
                                              {
                                                "nestedIndex": [
                                                  2,
                                                  0,
                                                  0,
                                                  2,
                                                  1,
                                                  1,
                                                  0,
                                                  0,
                                                  1,
                                                  1,
                                                  2
                                                ],
                                                "str": "'warn'",
                                                "label": 2,
                                                "name": "string",
                                                "childrenLabels": [
                                                  0
                                                ],
                                                "children": [
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      1,
                                                      2,
                                                      0
                                                    ],
                                                    "str": "warn",
                                                    "label": 0,
                                                    "name": "string_fragment"
                                                  }
                                                ]
                                              }
                                            ]
                                          },
                                          {
                                            "nestedIndex": [
                                              2,
                                              0,
                                              0,
                                              2,
                                              1,
                                              1,
                                              0,
                                              0,
                                              1,
                                              2
                                            ],
                                            "str": "['error']",
                                            "label": "alternativeNode",
                                            "name": "array",
                                            "childrenLabels": [
                                              0
                                            ],
                                            "children": [
                                              {
                                                "nestedIndex": [
                                                  2,
                                                  0,
                                                  0,
                                                  2,
                                                  1,
                                                  1,
                                                  0,
                                                  0,
                                                  1,
                                                  2,
                                                  0
                                                ],
                                                "str": "'error'",
                                                "label": 0,
                                                "name": "string",
                                                "childrenLabels": [
                                                  0
                                                ],
                                                "children": [
                                                  {
                                                    "nestedIndex": [
                                                      2,
                                                      0,
                                                      0,
                                                      2,
                                                      1,
                                                      1,
                                                      0,
                                                      0,
                                                      1,
                                                      2,
                                                      0,
                                                      0
                                                    ],
                                                    "str": "error",
                                                    "label": 0,
                                                    "name": "string_fragment"
                                                  }
                                                ]
                                              }
                                            ]
                                          }
                                        ]
                                      }
                                    ]
                                  }
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      },
      {
        "nestedIndex": [
          3
        ],
        "str": "if (env.NODE_ENV !== 'production') {\n  prismaGlobal.prisma = prisma;\n}",
        "label": 3,
        "name": "if_statement",
        "childrenLabels": [
          "conditionNode",
          "consequenceNode"
        ],
        "children": [
          {
            "nestedIndex": [
              3,
              0
            ],
            "str": "(env.NODE_ENV !== 'production')",
            "label": "conditionNode",
            "name": "parenthesized_expression",
            "childrenLabels": [
              0
            ],
            "children": [
              {
                "nestedIndex": [
                  3,
                  0,
                  0
                ],
                "str": "env.NODE_ENV !== 'production'",
                "label": 0,
                "name": "binary_expression",
                "childrenLabels": [
                  "leftNode",
                  "rightNode"
                ],
                "children": [
                  {
                    "nestedIndex": [
                      3,
                      0,
                      0,
                      0
                    ],
                    "str": "env.NODE_ENV",
                    "label": "leftNode",
                    "name": "member_expression",
                    "childrenLabels": [
                      "objectNode",
                      "propertyNode"
                    ],
                    "children": [
                      {
                        "nestedIndex": [
                          3,
                          0,
                          0,
                          0,
                          0
                        ],
                        "str": "env",
                        "label": "objectNode",
                        "name": "identifier"
                      },
                      {
                        "nestedIndex": [
                          3,
                          0,
                          0,
                          0,
                          1
                        ],
                        "str": "NODE_ENV",
                        "label": "propertyNode",
                        "name": "property_identifier"
                      }
                    ]
                  },
                  {
                    "nestedIndex": [
                      3,
                      0,
                      0,
                      1
                    ],
                    "str": "'production'",
                    "label": "rightNode",
                    "name": "string",
                    "childrenLabels": [
                      0
                    ],
                    "children": [
                      {
                        "nestedIndex": [
                          3,
                          0,
                          0,
                          1,
                          0
                        ],
                        "str": "production",
                        "label": 0,
                        "name": "string_fragment"
                      }
                    ]
                  }
                ]
              }
            ]
          },
          {
            "nestedIndex": [
              3,
              1
            ],
            "str": "{\n  prismaGlobal.prisma = prisma;\n}",
            "label": "consequenceNode",
            "name": "statement_block",
            "childrenLabels": [
              0
            ],
            "children": [
              {
                "nestedIndex": [
                  3,
                  1,
                  0
                ],
                "str": "prismaGlobal.prisma = prisma;",
                "label": 0,
                "name": "expression_statement",
                "childrenLabels": [
                  0
                ],
                "children": [
                  {
                    "nestedIndex": [
                      3,
                      1,
                      0,
                      0
                    ],
                    "str": "prismaGlobal.prisma = prisma",
                    "label": 0,
                    "name": "assignment_expression",
                    "childrenLabels": [
                      "leftNode",
                      "rightNode"
                    ],
                    "children": [
                      {
                        "nestedIndex": [
                          3,
                          1,
                          0,
                          0,
                          0
                        ],
                        "str": "prismaGlobal.prisma",
                        "label": "leftNode",
                        "name": "member_expression",
                        "childrenLabels": [
                          "objectNode",
                          "propertyNode"
                        ],
                        "children": [
                          {
                            "nestedIndex": [
                              3,
                              1,
                              0,
                              0,
                              0,
                              0
                            ],
                            "str": "prismaGlobal",
                            "label": "objectNode",
                            "name": "identifier"
                          },
                          {
                            "nestedIndex": [
                              3,
                              1,
                              0,
                              0,
                              0,
                              1
                            ],
                            "str": "prisma",
                            "label": "propertyNode",
                            "name": "property_identifier"
                          }
                        ]
                      },
                      {
                        "nestedIndex": [
                          3,
                          1,
                          0,
                          0,
                          1
                        ],
                        "str": "prisma",
                        "label": "rightNode",
                        "name": "identifier"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ]
      }
    ]
  },
  "imports": [
    "import { env } from './env';",
    "import { PrismaClient } from '@prisma/client';"
  ],
  "filePath": "../example-todo-list/src/server/prisma.ts",
  "isTest": false,
  "isConfig": false
}